// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"

#light "off"
open Tir

# 11 "parse.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | WHILE
  | VAR
  | TRUE
  | STRUCT
  | STRING of (string)
  | SEMICOLON
  | RPAREN
  | RETURN
  | RBRACE
  | RBOX
  | PRINTF
  | PLUS
  | MINUS
  | LPAREN
  | LET
  | LESS
  | LBRACE
  | LBOX
  | INT of (int)
  | IF
  | ID of (string)
  | FUNC
  | FALSE
  | EQUAL
  | EOF
  | ELSE
  | DOT
  | CSTRING
  | COMMA
  | COLON
  | CINT
  | CBOOL
  | ASTERISK
  | ASSIGN
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_WHILE
    | TOKEN_VAR
    | TOKEN_TRUE
    | TOKEN_STRUCT
    | TOKEN_STRING
    | TOKEN_SEMICOLON
    | TOKEN_RPAREN
    | TOKEN_RETURN
    | TOKEN_RBRACE
    | TOKEN_RBOX
    | TOKEN_PRINTF
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_LPAREN
    | TOKEN_LET
    | TOKEN_LESS
    | TOKEN_LBRACE
    | TOKEN_LBOX
    | TOKEN_INT
    | TOKEN_IF
    | TOKEN_ID
    | TOKEN_FUNC
    | TOKEN_FALSE
    | TOKEN_EQUAL
    | TOKEN_EOF
    | TOKEN_ELSE
    | TOKEN_DOT
    | TOKEN_CSTRING
    | TOKEN_COMMA
    | TOKEN_COLON
    | TOKEN_CINT
    | TOKEN_CBOOL
    | TOKEN_ASTERISK
    | TOKEN_ASSIGN
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startterm
    | NONTERM__startprog
    | NONTERM_option_VAR_
    | NONTERM_option_expr_
    | NONTERM_loption_separated_nonempty_list_COMMA_con__
    | NONTERM_loption_separated_nonempty_list_COMMA_expr__
    | NONTERM_loption_separated_nonempty_list_COMMA_param__
    | NONTERM_loption_separated_nonempty_list_COMMA_separated_pair_ID_COLON_con___
    | NONTERM_loption_separated_nonempty_list_COMMA_separated_pair_ID_COLON_expr___
    | NONTERM_list_stmt_
    | NONTERM_separated_nonempty_list_COMMA_con_
    | NONTERM_separated_nonempty_list_COMMA_expr_
    | NONTERM_separated_nonempty_list_COMMA_param_
    | NONTERM_separated_nonempty_list_COMMA_separated_pair_ID_COLON_con__
    | NONTERM_separated_nonempty_list_COMMA_separated_pair_ID_COLON_expr__
    | NONTERM_prog
    | NONTERM_term
    | NONTERM_expr
    | NONTERM_stmt
    | NONTERM_con

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | WHILE  -> 0 
  | VAR  -> 1 
  | TRUE  -> 2 
  | STRUCT  -> 3 
  | STRING _ -> 4 
  | SEMICOLON  -> 5 
  | RPAREN  -> 6 
  | RETURN  -> 7 
  | RBRACE  -> 8 
  | RBOX  -> 9 
  | PRINTF  -> 10 
  | PLUS  -> 11 
  | MINUS  -> 12 
  | LPAREN  -> 13 
  | LET  -> 14 
  | LESS  -> 15 
  | LBRACE  -> 16 
  | LBOX  -> 17 
  | INT _ -> 18 
  | IF  -> 19 
  | ID _ -> 20 
  | FUNC  -> 21 
  | FALSE  -> 22 
  | EQUAL  -> 23 
  | EOF  -> 24 
  | ELSE  -> 25 
  | DOT  -> 26 
  | CSTRING  -> 27 
  | COMMA  -> 28 
  | COLON  -> 29 
  | CINT  -> 30 
  | CBOOL  -> 31 
  | ASTERISK  -> 32 
  | ASSIGN  -> 33 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_WHILE 
  | 1 -> TOKEN_VAR 
  | 2 -> TOKEN_TRUE 
  | 3 -> TOKEN_STRUCT 
  | 4 -> TOKEN_STRING 
  | 5 -> TOKEN_SEMICOLON 
  | 6 -> TOKEN_RPAREN 
  | 7 -> TOKEN_RETURN 
  | 8 -> TOKEN_RBRACE 
  | 9 -> TOKEN_RBOX 
  | 10 -> TOKEN_PRINTF 
  | 11 -> TOKEN_PLUS 
  | 12 -> TOKEN_MINUS 
  | 13 -> TOKEN_LPAREN 
  | 14 -> TOKEN_LET 
  | 15 -> TOKEN_LESS 
  | 16 -> TOKEN_LBRACE 
  | 17 -> TOKEN_LBOX 
  | 18 -> TOKEN_INT 
  | 19 -> TOKEN_IF 
  | 20 -> TOKEN_ID 
  | 21 -> TOKEN_FUNC 
  | 22 -> TOKEN_FALSE 
  | 23 -> TOKEN_EQUAL 
  | 24 -> TOKEN_EOF 
  | 25 -> TOKEN_ELSE 
  | 26 -> TOKEN_DOT 
  | 27 -> TOKEN_CSTRING 
  | 28 -> TOKEN_COMMA 
  | 29 -> TOKEN_COLON 
  | 30 -> TOKEN_CINT 
  | 31 -> TOKEN_CBOOL 
  | 32 -> TOKEN_ASTERISK 
  | 33 -> TOKEN_ASSIGN 
  | 36 -> TOKEN_end_of_input
  | 34 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startterm 
    | 1 -> NONTERM__startprog 
    | 2 -> NONTERM_option_VAR_ 
    | 3 -> NONTERM_option_VAR_ 
    | 4 -> NONTERM_option_expr_ 
    | 5 -> NONTERM_option_expr_ 
    | 6 -> NONTERM_loption_separated_nonempty_list_COMMA_con__ 
    | 7 -> NONTERM_loption_separated_nonempty_list_COMMA_con__ 
    | 8 -> NONTERM_loption_separated_nonempty_list_COMMA_expr__ 
    | 9 -> NONTERM_loption_separated_nonempty_list_COMMA_expr__ 
    | 10 -> NONTERM_loption_separated_nonempty_list_COMMA_param__ 
    | 11 -> NONTERM_loption_separated_nonempty_list_COMMA_param__ 
    | 12 -> NONTERM_loption_separated_nonempty_list_COMMA_separated_pair_ID_COLON_con___ 
    | 13 -> NONTERM_loption_separated_nonempty_list_COMMA_separated_pair_ID_COLON_con___ 
    | 14 -> NONTERM_loption_separated_nonempty_list_COMMA_separated_pair_ID_COLON_expr___ 
    | 15 -> NONTERM_loption_separated_nonempty_list_COMMA_separated_pair_ID_COLON_expr___ 
    | 16 -> NONTERM_list_stmt_ 
    | 17 -> NONTERM_list_stmt_ 
    | 18 -> NONTERM_separated_nonempty_list_COMMA_con_ 
    | 19 -> NONTERM_separated_nonempty_list_COMMA_con_ 
    | 20 -> NONTERM_separated_nonempty_list_COMMA_expr_ 
    | 21 -> NONTERM_separated_nonempty_list_COMMA_expr_ 
    | 22 -> NONTERM_separated_nonempty_list_COMMA_param_ 
    | 23 -> NONTERM_separated_nonempty_list_COMMA_param_ 
    | 24 -> NONTERM_separated_nonempty_list_COMMA_separated_pair_ID_COLON_con__ 
    | 25 -> NONTERM_separated_nonempty_list_COMMA_separated_pair_ID_COLON_con__ 
    | 26 -> NONTERM_separated_nonempty_list_COMMA_separated_pair_ID_COLON_expr__ 
    | 27 -> NONTERM_separated_nonempty_list_COMMA_separated_pair_ID_COLON_expr__ 
    | 28 -> NONTERM_prog 
    | 29 -> NONTERM_term 
    | 30 -> NONTERM_expr 
    | 31 -> NONTERM_expr 
    | 32 -> NONTERM_expr 
    | 33 -> NONTERM_expr 
    | 34 -> NONTERM_expr 
    | 35 -> NONTERM_expr 
    | 36 -> NONTERM_expr 
    | 37 -> NONTERM_expr 
    | 38 -> NONTERM_expr 
    | 39 -> NONTERM_expr 
    | 40 -> NONTERM_expr 
    | 41 -> NONTERM_expr 
    | 42 -> NONTERM_expr 
    | 43 -> NONTERM_expr 
    | 44 -> NONTERM_expr 
    | 45 -> NONTERM_expr 
    | 46 -> NONTERM_expr 
    | 47 -> NONTERM_stmt 
    | 48 -> NONTERM_stmt 
    | 49 -> NONTERM_stmt 
    | 50 -> NONTERM_stmt 
    | 51 -> NONTERM_stmt 
    | 52 -> NONTERM_stmt 
    | 53 -> NONTERM_stmt 
    | 54 -> NONTERM_stmt 
    | 55 -> NONTERM_stmt 
    | 56 -> NONTERM_stmt 
    | 57 -> NONTERM_stmt 
    | 58 -> NONTERM_con 
    | 59 -> NONTERM_con 
    | 60 -> NONTERM_con 
    | 61 -> NONTERM_con 
    | 62 -> NONTERM_con 
    | 63 -> NONTERM_con 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 36 
let _fsyacc_tagOfErrorTerminal = 34

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | WHILE  -> "WHILE" 
  | VAR  -> "VAR" 
  | TRUE  -> "TRUE" 
  | STRUCT  -> "STRUCT" 
  | STRING _ -> "STRING" 
  | SEMICOLON  -> "SEMICOLON" 
  | RPAREN  -> "RPAREN" 
  | RETURN  -> "RETURN" 
  | RBRACE  -> "RBRACE" 
  | RBOX  -> "RBOX" 
  | PRINTF  -> "PRINTF" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | LPAREN  -> "LPAREN" 
  | LET  -> "LET" 
  | LESS  -> "LESS" 
  | LBRACE  -> "LBRACE" 
  | LBOX  -> "LBOX" 
  | INT _ -> "INT" 
  | IF  -> "IF" 
  | ID _ -> "ID" 
  | FUNC  -> "FUNC" 
  | FALSE  -> "FALSE" 
  | EQUAL  -> "EQUAL" 
  | EOF  -> "EOF" 
  | ELSE  -> "ELSE" 
  | DOT  -> "DOT" 
  | CSTRING  -> "CSTRING" 
  | COMMA  -> "COMMA" 
  | COLON  -> "COLON" 
  | CINT  -> "CINT" 
  | CBOOL  -> "CBOOL" 
  | ASTERISK  -> "ASTERISK" 
  | ASSIGN  -> "ASSIGN" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | WHILE  -> (null : System.Object) 
  | VAR  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | STRUCT  -> (null : System.Object) 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SEMICOLON  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | RETURN  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | RBOX  -> (null : System.Object) 
  | PRINTF  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | LESS  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | LBOX  -> (null : System.Object) 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IF  -> (null : System.Object) 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FUNC  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | CSTRING  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | CINT  -> (null : System.Object) 
  | CBOOL  -> (null : System.Object) 
  | ASTERISK  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 0us; 65535us; 2us; 65535us; 23us; 19us; 84us; 19us; 1us; 65535us; 140us; 141us; 1us; 65535us; 136us; 137us; 3us; 65535us; 64us; 65us; 69us; 70us; 75us; 76us; 1us; 65535us; 84us; 85us; 1us; 65535us; 111us; 112us; 1us; 65535us; 72us; 73us; 7us; 65535us; 2us; 35us; 11us; 12us; 89us; 90us; 92us; 93us; 120us; 121us; 124us; 125us; 130us; 131us; 2us; 65535us; 14us; 15us; 136us; 6us; 4us; 65535us; 17us; 18us; 64us; 7us; 69us; 7us; 75us; 7us; 2us; 65535us; 23us; 24us; 84us; 8us; 2us; 65535us; 28us; 29us; 111us; 9us; 2us; 65535us; 33us; 34us; 72us; 10us; 1us; 65535us; 2us; 3us; 1us; 65535us; 0us; 1us; 27us; 65535us; 0us; 37us; 2us; 54us; 11us; 54us; 17us; 16us; 31us; 32us; 58us; 44us; 59us; 45us; 60us; 46us; 61us; 47us; 62us; 48us; 64us; 16us; 67us; 49us; 69us; 16us; 75us; 16us; 80us; 50us; 89us; 54us; 92us; 54us; 95us; 51us; 101us; 52us; 107us; 53us; 115us; 55us; 118us; 56us; 120us; 54us; 124us; 54us; 128us; 57us; 130us; 54us; 140us; 5us; 7us; 65535us; 2us; 11us; 11us; 11us; 89us; 11us; 92us; 11us; 120us; 11us; 124us; 11us; 130us; 11us; 7us; 65535us; 14us; 13us; 21us; 22us; 26us; 27us; 87us; 88us; 99us; 100us; 105us; 106us; 136us; 13us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 2us; 5us; 7us; 9us; 13us; 15us; 17us; 19us; 27us; 30us; 35us; 38us; 41us; 44us; 46us; 48us; 76us; 84us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 3us; 9us; 5us; 35us; 36us; 37us; 38us; 39us; 44us; 45us; 46us; 1us; 7us; 1us; 9us; 1us; 11us; 1us; 13us; 1us; 15us; 1us; 17us; 1us; 17us; 3us; 18us; 19us; 63us; 1us; 19us; 1us; 19us; 10us; 20us; 21us; 35us; 36us; 37us; 38us; 39us; 44us; 45us; 46us; 1us; 21us; 1us; 21us; 2us; 22us; 23us; 2us; 22us; 23us; 2us; 22us; 23us; 3us; 22us; 23us; 63us; 1us; 23us; 1us; 23us; 2us; 24us; 25us; 2us; 24us; 25us; 3us; 24us; 25us; 63us; 1us; 25us; 1us; 25us; 2us; 26us; 27us; 2us; 26us; 27us; 10us; 26us; 27us; 35us; 36us; 37us; 38us; 39us; 44us; 45us; 46us; 1us; 27us; 1us; 27us; 1us; 28us; 1us; 28us; 9us; 29us; 35us; 36us; 37us; 38us; 39us; 44us; 45us; 46us; 1us; 29us; 1us; 30us; 1us; 31us; 1us; 32us; 1us; 33us; 2us; 34us; 43us; 9us; 35us; 35us; 36us; 37us; 38us; 39us; 44us; 45us; 46us; 9us; 35us; 36us; 36us; 37us; 38us; 39us; 44us; 45us; 46us; 9us; 35us; 36us; 37us; 37us; 38us; 39us; 44us; 45us; 46us; 9us; 35us; 36us; 37us; 38us; 38us; 39us; 44us; 45us; 46us; 9us; 35us; 36us; 37us; 38us; 39us; 39us; 44us; 45us; 46us; 9us; 35us; 36us; 37us; 38us; 39us; 41us; 44us; 45us; 46us; 9us; 35us; 36us; 37us; 38us; 39us; 44us; 45us; 46us; 46us; 9us; 35us; 36us; 37us; 38us; 39us; 44us; 45us; 46us; 49us; 9us; 35us; 36us; 37us; 38us; 39us; 44us; 45us; 46us; 50us; 9us; 35us; 36us; 37us; 38us; 39us; 44us; 45us; 46us; 51us; 10us; 35us; 36us; 37us; 38us; 39us; 44us; 45us; 46us; 53us; 54us; 9us; 35us; 36us; 37us; 38us; 39us; 44us; 45us; 46us; 54us; 10us; 35us; 36us; 37us; 38us; 39us; 44us; 45us; 46us; 55us; 56us; 9us; 35us; 36us; 37us; 38us; 39us; 44us; 45us; 46us; 57us; 1us; 35us; 1us; 36us; 1us; 37us; 1us; 38us; 1us; 39us; 1us; 40us; 1us; 40us; 1us; 40us; 1us; 40us; 1us; 41us; 1us; 41us; 1us; 42us; 1us; 42us; 1us; 42us; 1us; 43us; 1us; 43us; 1us; 43us; 1us; 44us; 1us; 44us; 1us; 44us; 1us; 45us; 1us; 45us; 1us; 46us; 1us; 46us; 1us; 47us; 1us; 47us; 1us; 47us; 1us; 47us; 1us; 47us; 1us; 47us; 2us; 47us; 63us; 1us; 47us; 1us; 47us; 1us; 47us; 1us; 48us; 1us; 48us; 1us; 48us; 1us; 49us; 1us; 49us; 1us; 50us; 1us; 50us; 1us; 50us; 2us; 50us; 63us; 1us; 50us; 1us; 50us; 1us; 51us; 1us; 51us; 1us; 51us; 2us; 51us; 63us; 1us; 51us; 1us; 51us; 1us; 52us; 1us; 52us; 1us; 52us; 1us; 52us; 1us; 52us; 1us; 53us; 1us; 54us; 1us; 54us; 2us; 55us; 56us; 2us; 55us; 56us; 2us; 55us; 56us; 2us; 55us; 56us; 2us; 55us; 56us; 2us; 55us; 56us; 1us; 56us; 1us; 56us; 1us; 56us; 1us; 56us; 1us; 57us; 1us; 57us; 1us; 57us; 1us; 57us; 1us; 57us; 1us; 57us; 1us; 58us; 1us; 59us; 1us; 60us; 1us; 61us; 1us; 61us; 1us; 61us; 1us; 62us; 1us; 63us; 1us; 63us; 1us; 63us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 20us; 22us; 24us; 26us; 28us; 30us; 32us; 34us; 38us; 40us; 42us; 53us; 55us; 57us; 60us; 63us; 66us; 70us; 72us; 74us; 77us; 80us; 84us; 86us; 88us; 91us; 94us; 105us; 107us; 109us; 111us; 113us; 123us; 125us; 127us; 129us; 131us; 133us; 136us; 146us; 156us; 166us; 176us; 186us; 196us; 206us; 216us; 226us; 236us; 247us; 257us; 268us; 278us; 280us; 282us; 284us; 286us; 288us; 290us; 292us; 294us; 296us; 298us; 300us; 302us; 304us; 306us; 308us; 310us; 312us; 314us; 316us; 318us; 320us; 322us; 324us; 326us; 328us; 330us; 332us; 334us; 336us; 338us; 341us; 343us; 345us; 347us; 349us; 351us; 353us; 355us; 357us; 359us; 361us; 363us; 366us; 368us; 370us; 372us; 374us; 376us; 379us; 381us; 383us; 385us; 387us; 389us; 391us; 393us; 395us; 397us; 399us; 402us; 405us; 408us; 411us; 414us; 417us; 419us; 421us; 423us; 425us; 427us; 429us; 431us; 433us; 435us; 437us; 439us; 441us; 443us; 445us; 447us; 449us; 451us; 453us; 455us; |]
let _fsyacc_action_rows = 143
let _fsyacc_actionTableElements = [|8us; 32768us; 2us; 41us; 4us; 40us; 10us; 63us; 13us; 67us; 17us; 69us; 18us; 39us; 20us; 43us; 22us; 42us; 0us; 49152us; 16us; 16400us; 0us; 127us; 1us; 103us; 2us; 41us; 3us; 109us; 4us; 40us; 7us; 95us; 10us; 63us; 13us; 67us; 14us; 97us; 16us; 92us; 17us; 69us; 18us; 39us; 19us; 117us; 20us; 43us; 21us; 82us; 22us; 42us; 0us; 49152us; 0us; 16387us; 8us; 16389us; 11us; 58us; 12us; 60us; 13us; 75us; 15us; 61us; 17us; 80us; 23us; 62us; 26us; 78us; 32us; 59us; 0us; 16391us; 0us; 16393us; 0us; 16395us; 0us; 16397us; 0us; 16399us; 16us; 16400us; 0us; 127us; 1us; 103us; 2us; 41us; 3us; 109us; 4us; 40us; 7us; 95us; 10us; 63us; 13us; 67us; 14us; 97us; 16us; 92us; 17us; 69us; 18us; 39us; 19us; 117us; 20us; 43us; 21us; 82us; 22us; 42us; 0us; 16401us; 2us; 16402us; 17us; 140us; 28us; 14us; 5us; 32768us; 13us; 136us; 20us; 139us; 27us; 134us; 30us; 133us; 31us; 135us; 0us; 16403us; 9us; 16404us; 11us; 58us; 12us; 60us; 13us; 75us; 15us; 61us; 17us; 80us; 23us; 62us; 26us; 78us; 28us; 17us; 32us; 59us; 8us; 32768us; 2us; 41us; 4us; 40us; 10us; 63us; 13us; 67us; 17us; 69us; 18us; 39us; 20us; 43us; 22us; 42us; 0us; 16405us; 1us; 32768us; 20us; 20us; 1us; 32768us; 29us; 21us; 5us; 32768us; 13us; 136us; 20us; 139us; 27us; 134us; 30us; 133us; 31us; 135us; 2us; 16406us; 17us; 140us; 28us; 23us; 1us; 16386us; 1us; 4us; 0us; 16407us; 1us; 32768us; 29us; 26us; 5us; 32768us; 13us; 136us; 20us; 139us; 27us; 134us; 30us; 133us; 31us; 135us; 2us; 16408us; 17us; 140us; 28us; 28us; 1us; 32768us; 20us; 25us; 0us; 16409us; 1us; 32768us; 29us; 31us; 8us; 32768us; 2us; 41us; 4us; 40us; 10us; 63us; 13us; 67us; 17us; 69us; 18us; 39us; 20us; 43us; 22us; 42us; 9us; 16410us; 11us; 58us; 12us; 60us; 13us; 75us; 15us; 61us; 17us; 80us; 23us; 62us; 26us; 78us; 28us; 33us; 32us; 59us; 1us; 32768us; 20us; 30us; 0us; 16411us; 1us; 32768us; 24us; 36us; 0us; 16412us; 9us; 32768us; 11us; 58us; 12us; 60us; 13us; 75us; 15us; 61us; 17us; 80us; 23us; 62us; 24us; 38us; 26us; 78us; 32us; 59us; 0us; 16413us; 0us; 16414us; 0us; 16415us; 0us; 16416us; 0us; 16417us; 1us; 16418us; 16us; 72us; 7us; 16419us; 12us; 60us; 13us; 75us; 15us; 61us; 17us; 80us; 23us; 62us; 26us; 78us; 32us; 59us; 6us; 16420us; 12us; 60us; 13us; 75us; 15us; 61us; 17us; 80us; 23us; 62us; 26us; 78us; 5us; 16421us; 13us; 75us; 15us; 61us; 17us; 80us; 23us; 62us; 26us; 78us; 4us; 16422us; 13us; 75us; 17us; 80us; 23us; 62us; 26us; 78us; 3us; 16423us; 13us; 75us; 17us; 80us; 26us; 78us; 9us; 32768us; 6us; 68us; 11us; 58us; 12us; 60us; 13us; 75us; 15us; 61us; 17us; 80us; 23us; 62us; 26us; 78us; 32us; 59us; 9us; 32768us; 9us; 81us; 11us; 58us; 12us; 60us; 13us; 75us; 15us; 61us; 17us; 80us; 23us; 62us; 26us; 78us; 32us; 59us; 9us; 32768us; 5us; 96us; 11us; 58us; 12us; 60us; 13us; 75us; 15us; 61us; 17us; 80us; 23us; 62us; 26us; 78us; 32us; 59us; 9us; 32768us; 5us; 102us; 11us; 58us; 12us; 60us; 13us; 75us; 15us; 61us; 17us; 80us; 23us; 62us; 26us; 78us; 32us; 59us; 9us; 32768us; 5us; 108us; 11us; 58us; 12us; 60us; 13us; 75us; 15us; 61us; 17us; 80us; 23us; 62us; 26us; 78us; 32us; 59us; 10us; 32768us; 5us; 114us; 11us; 58us; 12us; 60us; 13us; 75us; 15us; 61us; 17us; 80us; 23us; 62us; 26us; 78us; 32us; 59us; 33us; 115us; 9us; 32768us; 5us; 116us; 11us; 58us; 12us; 60us; 13us; 75us; 15us; 61us; 17us; 80us; 23us; 62us; 26us; 78us; 32us; 59us; 9us; 32768us; 6us; 119us; 11us; 58us; 12us; 60us; 13us; 75us; 15us; 61us; 17us; 80us; 23us; 62us; 26us; 78us; 32us; 59us; 9us; 32768us; 6us; 129us; 11us; 58us; 12us; 60us; 13us; 75us; 15us; 61us; 17us; 80us; 23us; 62us; 26us; 78us; 32us; 59us; 8us; 32768us; 2us; 41us; 4us; 40us; 10us; 63us; 13us; 67us; 17us; 69us; 18us; 39us; 20us; 43us; 22us; 42us; 8us; 32768us; 2us; 41us; 4us; 40us; 10us; 63us; 13us; 67us; 17us; 69us; 18us; 39us; 20us; 43us; 22us; 42us; 8us; 32768us; 2us; 41us; 4us; 40us; 10us; 63us; 13us; 67us; 17us; 69us; 18us; 39us; 20us; 43us; 22us; 42us; 8us; 32768us; 2us; 41us; 4us; 40us; 10us; 63us; 13us; 67us; 17us; 69us; 18us; 39us; 20us; 43us; 22us; 42us; 8us; 32768us; 2us; 41us; 4us; 40us; 10us; 63us; 13us; 67us; 17us; 69us; 18us; 39us; 20us; 43us; 22us; 42us; 1us; 32768us; 17us; 64us; 8us; 16392us; 2us; 41us; 4us; 40us; 10us; 63us; 13us; 67us; 17us; 69us; 18us; 39us; 20us; 43us; 22us; 42us; 1us; 32768us; 9us; 66us; 0us; 16424us; 8us; 32768us; 2us; 41us; 4us; 40us; 10us; 63us; 13us; 67us; 17us; 69us; 18us; 39us; 20us; 43us; 22us; 42us; 0us; 16425us; 8us; 16392us; 2us; 41us; 4us; 40us; 10us; 63us; 13us; 67us; 17us; 69us; 18us; 39us; 20us; 43us; 22us; 42us; 1us; 32768us; 9us; 71us; 0us; 16426us; 1us; 16398us; 20us; 30us; 1us; 32768us; 8us; 74us; 0us; 16427us; 8us; 16392us; 2us; 41us; 4us; 40us; 10us; 63us; 13us; 67us; 17us; 69us; 18us; 39us; 20us; 43us; 22us; 42us; 1us; 32768us; 6us; 77us; 0us; 16428us; 1us; 32768us; 20us; 79us; 0us; 16429us; 8us; 32768us; 2us; 41us; 4us; 40us; 10us; 63us; 13us; 67us; 17us; 69us; 18us; 39us; 20us; 43us; 22us; 42us; 0us; 16430us; 1us; 32768us; 20us; 83us; 1us; 32768us; 13us; 84us; 2us; 16386us; 1us; 4us; 6us; 16394us; 1us; 32768us; 6us; 86us; 1us; 32768us; 29us; 87us; 5us; 32768us; 13us; 136us; 20us; 139us; 27us; 134us; 30us; 133us; 31us; 135us; 2us; 32768us; 16us; 89us; 17us; 140us; 16us; 16400us; 0us; 127us; 1us; 103us; 2us; 41us; 3us; 109us; 4us; 40us; 7us; 95us; 10us; 63us; 13us; 67us; 14us; 97us; 16us; 92us; 17us; 69us; 18us; 39us; 19us; 117us; 20us; 43us; 21us; 82us; 22us; 42us; 1us; 32768us; 8us; 91us; 0us; 16431us; 16us; 16400us; 0us; 127us; 1us; 103us; 2us; 41us; 3us; 109us; 4us; 40us; 7us; 95us; 10us; 63us; 13us; 67us; 14us; 97us; 16us; 92us; 17us; 69us; 18us; 39us; 19us; 117us; 20us; 43us; 21us; 82us; 22us; 42us; 1us; 32768us; 8us; 94us; 0us; 16432us; 8us; 32768us; 2us; 41us; 4us; 40us; 10us; 63us; 13us; 67us; 17us; 69us; 18us; 39us; 20us; 43us; 22us; 42us; 0us; 16433us; 1us; 32768us; 20us; 98us; 1us; 32768us; 29us; 99us; 5us; 32768us; 13us; 136us; 20us; 139us; 27us; 134us; 30us; 133us; 31us; 135us; 2us; 32768us; 17us; 140us; 33us; 101us; 8us; 32768us; 2us; 41us; 4us; 40us; 10us; 63us; 13us; 67us; 17us; 69us; 18us; 39us; 20us; 43us; 22us; 42us; 0us; 16434us; 1us; 32768us; 20us; 104us; 1us; 32768us; 29us; 105us; 5us; 32768us; 13us; 136us; 20us; 139us; 27us; 134us; 30us; 133us; 31us; 135us; 2us; 32768us; 17us; 140us; 33us; 107us; 8us; 32768us; 2us; 41us; 4us; 40us; 10us; 63us; 13us; 67us; 17us; 69us; 18us; 39us; 20us; 43us; 22us; 42us; 0us; 16435us; 1us; 32768us; 20us; 110us; 1us; 32768us; 16us; 111us; 1us; 16396us; 20us; 25us; 1us; 32768us; 8us; 113us; 0us; 16436us; 0us; 16437us; 8us; 32768us; 2us; 41us; 4us; 40us; 10us; 63us; 13us; 67us; 17us; 69us; 18us; 39us; 20us; 43us; 22us; 42us; 0us; 16438us; 1us; 32768us; 13us; 118us; 8us; 32768us; 2us; 41us; 4us; 40us; 10us; 63us; 13us; 67us; 17us; 69us; 18us; 39us; 20us; 43us; 22us; 42us; 1us; 32768us; 16us; 120us; 16us; 16400us; 0us; 127us; 1us; 103us; 2us; 41us; 3us; 109us; 4us; 40us; 7us; 95us; 10us; 63us; 13us; 67us; 14us; 97us; 16us; 92us; 17us; 69us; 18us; 39us; 19us; 117us; 20us; 43us; 21us; 82us; 22us; 42us; 1us; 32768us; 8us; 122us; 1us; 16439us; 25us; 123us; 1us; 32768us; 16us; 124us; 16us; 16400us; 0us; 127us; 1us; 103us; 2us; 41us; 3us; 109us; 4us; 40us; 7us; 95us; 10us; 63us; 13us; 67us; 14us; 97us; 16us; 92us; 17us; 69us; 18us; 39us; 19us; 117us; 20us; 43us; 21us; 82us; 22us; 42us; 1us; 32768us; 8us; 126us; 0us; 16440us; 1us; 32768us; 13us; 128us; 8us; 32768us; 2us; 41us; 4us; 40us; 10us; 63us; 13us; 67us; 17us; 69us; 18us; 39us; 20us; 43us; 22us; 42us; 1us; 32768us; 16us; 130us; 16us; 16400us; 0us; 127us; 1us; 103us; 2us; 41us; 3us; 109us; 4us; 40us; 7us; 95us; 10us; 63us; 13us; 67us; 14us; 97us; 16us; 92us; 17us; 69us; 18us; 39us; 19us; 117us; 20us; 43us; 21us; 82us; 22us; 42us; 1us; 32768us; 8us; 132us; 0us; 16441us; 0us; 16442us; 0us; 16443us; 0us; 16444us; 5us; 16390us; 13us; 136us; 20us; 139us; 27us; 134us; 30us; 133us; 31us; 135us; 1us; 32768us; 6us; 138us; 0us; 16445us; 0us; 16446us; 8us; 16388us; 2us; 41us; 4us; 40us; 10us; 63us; 13us; 67us; 17us; 69us; 18us; 39us; 20us; 43us; 22us; 42us; 1us; 32768us; 9us; 142us; 0us; 16447us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 9us; 10us; 27us; 28us; 29us; 38us; 39us; 40us; 41us; 42us; 43us; 60us; 61us; 64us; 70us; 71us; 81us; 90us; 91us; 93us; 95us; 101us; 104us; 106us; 107us; 109us; 115us; 118us; 120us; 121us; 123us; 132us; 142us; 144us; 145us; 147us; 148us; 158us; 159us; 160us; 161us; 162us; 163us; 165us; 173us; 180us; 186us; 191us; 195us; 205us; 215us; 225us; 235us; 245us; 256us; 266us; 276us; 286us; 295us; 304us; 313us; 322us; 331us; 333us; 342us; 344us; 345us; 354us; 355us; 364us; 366us; 367us; 369us; 371us; 372us; 381us; 383us; 384us; 386us; 387us; 396us; 397us; 399us; 401us; 404us; 406us; 408us; 414us; 417us; 434us; 436us; 437us; 454us; 456us; 457us; 466us; 467us; 469us; 471us; 477us; 480us; 489us; 490us; 492us; 494us; 500us; 503us; 512us; 513us; 515us; 517us; 519us; 521us; 522us; 523us; 532us; 533us; 535us; 544us; 546us; 563us; 565us; 567us; 569us; 586us; 588us; 589us; 591us; 600us; 602us; 619us; 621us; 622us; 623us; 624us; 625us; 631us; 633us; 634us; 635us; 644us; 646us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 0us; 1us; 0us; 1us; 0us; 1us; 0us; 1us; 0us; 1us; 0us; 1us; 0us; 1us; 0us; 2us; 1us; 3us; 1us; 3us; 4us; 6us; 3us; 5us; 3us; 5us; 2us; 2us; 1us; 1us; 1us; 1us; 1us; 3us; 3us; 3us; 3us; 3us; 4us; 3us; 3us; 4us; 4us; 3us; 4us; 10us; 3us; 3us; 7us; 7us; 5us; 2us; 4us; 7us; 11us; 7us; 1us; 1us; 1us; 3us; 1us; 4us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 8us; 8us; 9us; 9us; 10us; 10us; 11us; 11us; 12us; 12us; 13us; 13us; 14us; 14us; 15us; 16us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 19us; 19us; 19us; 19us; 19us; 19us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 49152us; 16387us; 65535us; 16391us; 16393us; 16395us; 16397us; 16399us; 65535us; 16401us; 65535us; 65535us; 16403us; 65535us; 65535us; 16405us; 65535us; 65535us; 65535us; 65535us; 65535us; 16407us; 65535us; 65535us; 65535us; 65535us; 16409us; 65535us; 65535us; 65535us; 65535us; 16411us; 65535us; 16412us; 65535us; 16413us; 16414us; 16415us; 16416us; 16417us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16424us; 65535us; 16425us; 65535us; 65535us; 16426us; 65535us; 65535us; 16427us; 65535us; 65535us; 16428us; 65535us; 16429us; 65535us; 16430us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16431us; 65535us; 65535us; 16432us; 65535us; 16433us; 65535us; 65535us; 65535us; 65535us; 65535us; 16434us; 65535us; 65535us; 65535us; 65535us; 65535us; 16435us; 65535us; 65535us; 65535us; 65535us; 16436us; 16437us; 65535us; 16438us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16440us; 65535us; 65535us; 65535us; 65535us; 65535us; 16441us; 16442us; 16443us; 16444us; 65535us; 65535us; 16445us; 16446us; 65535us; 65535us; 16447us; |]
let _fsyacc_reductions ()  =    [| 
# 346 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startterm));
# 355 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : stmt list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startprog));
# 364 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                              ( None )
                   )
# 55 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'option_VAR_));
# 374 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let x = () in
                         ( Some x )
                   )
# 57 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'option_VAR_));
# 385 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                              ( None )
                   )
# 62 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'option_expr_));
# 395 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let x = _1 in
                         ( Some x )
                   )
# 64 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'option_expr_));
# 407 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                              ( [] )
                   )
# 69 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'loption_separated_nonempty_list_COMMA_con__));
# 417 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'separated_nonempty_list_COMMA_con_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let x = _1 in
                         ( x )
                   )
# 71 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'loption_separated_nonempty_list_COMMA_con__));
# 429 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                              ( [] )
                   )
# 76 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'loption_separated_nonempty_list_COMMA_expr__));
# 439 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'separated_nonempty_list_COMMA_expr_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let x = _1 in
                         ( x )
                   )
# 78 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'loption_separated_nonempty_list_COMMA_expr__));
# 451 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                              ( [] )
                   )
# 83 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'loption_separated_nonempty_list_COMMA_param__));
# 461 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'separated_nonempty_list_COMMA_param_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let x = _1 in
                         ( x )
                   )
# 85 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'loption_separated_nonempty_list_COMMA_param__));
# 473 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                              ( [] )
                   )
# 90 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'loption_separated_nonempty_list_COMMA_separated_pair_ID_COLON_con___));
# 483 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'separated_nonempty_list_COMMA_separated_pair_ID_COLON_con__)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let x = _1 in
                         ( x )
                   )
# 92 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'loption_separated_nonempty_list_COMMA_separated_pair_ID_COLON_con___));
# 495 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                              ( [] )
                   )
# 97 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'loption_separated_nonempty_list_COMMA_separated_pair_ID_COLON_expr___));
# 505 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'separated_nonempty_list_COMMA_separated_pair_ID_COLON_expr__)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let x = _1 in
                         ( x )
                   )
# 99 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'loption_separated_nonempty_list_COMMA_separated_pair_ID_COLON_expr___));
# 517 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                              ( [] )
                   )
# 104 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'list_stmt_));
# 527 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'stmt)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'list_stmt_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let (x, xs) = (_1, _2) in
                         ( x :: xs )
                   )
# 106 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'list_stmt_));
# 540 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'con)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let x = _1 in
                         ( [ x ] )
                   )
# 111 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'separated_nonempty_list_COMMA_con_));
# 552 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'con)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'separated_nonempty_list_COMMA_con_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let (x, _2, xs) = (_1, (), _3) in
                         ( x :: xs )
                   )
# 114 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'separated_nonempty_list_COMMA_con_));
# 565 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let x = _1 in
                         ( [ x ] )
                   )
# 119 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'separated_nonempty_list_COMMA_expr_));
# 577 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'separated_nonempty_list_COMMA_expr_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let (x, _2, xs) = (_1, (), _3) in
                         ( x :: xs )
                   )
# 122 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'separated_nonempty_list_COMMA_expr_));
# 590 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'option_VAR_)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'con)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let (mut, x, _3, ty) = (_1, _2, (), _4) in
                     let x =                                                ( (Var.newvar (Some x), (if Option.isSome mut then Tmut else Timm), ty) ) in
                         ( [ x ] )
                   )
# 127 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'separated_nonempty_list_COMMA_param_));
# 605 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'option_VAR_)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'con)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'separated_nonempty_list_COMMA_param_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let (mut, x, _3, ty, _2, xs) = (_1, _2, (), _4, (), _6) in
                     let x =                                                ( (Var.newvar (Some x), (if Option.isSome mut then Tmut else Timm), ty) ) in
                         ( x :: xs )
                   )
# 131 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'separated_nonempty_list_COMMA_param_));
# 621 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'con)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let (x, _2, y) = (_1, (), _3) in
                     let x =     ( (x, y) ) in
                         ( [ x ] )
                   )
# 137 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'separated_nonempty_list_COMMA_separated_pair_ID_COLON_con__));
# 635 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'con)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'separated_nonempty_list_COMMA_separated_pair_ID_COLON_con__)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let (x, _2_inlined1, y, _2, xs) = (_1, (), _3, (), _5) in
                     let x =
                       let _2 = _2_inlined1 in
                           ( (x, y) )
                     in
                         ( x :: xs )
                   )
# 141 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'separated_nonempty_list_COMMA_separated_pair_ID_COLON_con__));
# 653 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let (x, _2, y) = (_1, (), _3) in
                     let x =     ( (x, y) ) in
                         ( [ x ] )
                   )
# 150 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'separated_nonempty_list_COMMA_separated_pair_ID_COLON_expr__));
# 667 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'separated_nonempty_list_COMMA_separated_pair_ID_COLON_expr__)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let (x, _2_inlined1, y, _2, xs) = (_1, (), _3, (), _5) in
                     let x =
                       let _2 = _2_inlined1 in
                           ( (x, y) )
                     in
                         ( x :: xs )
                   )
# 154 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'separated_nonempty_list_COMMA_separated_pair_ID_COLON_expr__));
# 685 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'list_stmt_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let (s, _2) = (_1, ()) in
                                             ( s )
                   )
# 163 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : stmt list));
# 697 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let (e, _2) = (_1, ()) in
                                       ( e )
                   )
# 168 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : expr));
# 709 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let i = _1 in
                                ( Texpr_int i )
                   )
# 173 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'expr));
# 721 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 176 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let s = _1 in
                                    ( Texpr_string s )
                   )
# 176 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'expr));
# 733 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 179 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let _1 = () in
                              ( Texpr_bool true )
                   )
# 179 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'expr));
# 744 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 182 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let _1 = () in
                               ( Texpr_bool false )
                   )
# 182 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'expr));
# 755 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 185 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let x = _1 in
                               ( Texpr_var (-1, Some x) )
                   )
# 185 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'expr));
# 767 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 188 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let (e0, _2, e1) = (_1, (), _3) in
                                                   ( Texpr_op (Top_add, [e0; e1]) )
                   )
# 188 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'expr));
# 780 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 191 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let (e0, _2, e1) = (_1, (), _3) in
                                                        ( Texpr_op (Top_multiply, [e0; e1]) )
                   )
# 191 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'expr));
# 793 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 194 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let (e0, _2, e1) = (_1, (), _3) in
                                                     ( Texpr_op (Top_minus, [e0; e1]) )
                   )
# 194 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'expr));
# 806 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 197 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let (e0, _2, e1) = (_1, (), _3) in
                                                    ( Texpr_op (Top_lt, [e0; e1]) )
                   )
# 197 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'expr));
# 819 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 200 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let (e0, _2, e1) = (_1, (), _3) in
                                                     ( Texpr_op (Top_equal, [e0; e1]) )
                   )
# 200 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'expr));
# 832 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'loption_separated_nonempty_list_COMMA_expr__)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 203 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let (_1, _2, xs, _4) = ((), (), _3, ()) in
                     let el =     ( xs ) in
                                                                              ( Texpr_op (Top_cprintf, el) )
                   )
# 203 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'expr));
# 845 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 207 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let (_1, e, _3) = ((), _2, ()) in
                                                 ( e )
                   )
# 207 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'expr));
# 857 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'loption_separated_nonempty_list_COMMA_expr__)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 210 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let (_1, xs, _3) = ((), _2, ()) in
                     let el =     ( xs ) in
                                                                      ( Texpr_array el )
                   )
# 210 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'expr));
# 870 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'loption_separated_nonempty_list_COMMA_separated_pair_ID_COLON_expr___)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 214 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let (c, _2, xs, _4) = (_1, (), _3, ()) in
                     let xel =     ( xs ) in
                                                                                                              ( Texpr_ctor (Tcon_named (-1, Some c), xel) )
                   )
# 214 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'expr));
# 884 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'loption_separated_nonempty_list_COMMA_expr__)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 218 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let (caller, _2, xs, _4) = (_1, (), _3, ()) in
                     let args =     ( xs ) in
                                                                                           ( Texpr_app(caller, args) )
                   )
# 218 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'expr));
# 898 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 222 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let (e0, _2, field) = (_1, (), _3) in
                                                    ( Texpr_field (e0, (-1, Some field)) )
                   )
# 222 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'expr));
# 911 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 225 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let (e, _2, i, _4) = (_1, (), _3, ()) in
                                                        ( Texpr_op (Top_idx, [e; i]) )
                   )
# 225 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'expr));
# 924 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'loption_separated_nonempty_list_COMMA_param__)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'con)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'list_stmt_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 230 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let (_1, fname, _3, xs, _5, _6, tr, _8, sl, _10) = ((), _2, (), _4, (), (), _7, (), _9, ()) in
                     let params =     ( xs ) in
                                                                                                                                                   ( Tstmt_decl (Var.newvar (Some fname), Timm, (Some (Tcon_arrow (List.map (fun (_, _, x) -> x) params, tr))), Texpr_func (params, tr, Tstmt_blk sl)) )
                   )
# 230 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'stmt));
# 940 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'list_stmt_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 234 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let (_1, stmts, _3) = ((), _2, ()) in
                                                            ( Tstmt_blk stmts )
                   )
# 234 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'stmt));
# 952 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 237 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let (_1, e, _3) = ((), _2, ()) in
                                                     ( Tstmt_ret e )
                   )
# 237 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'stmt));
# 964 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'con)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 240 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let (_1, x, _3, ty, _5, e, _7) = ((), _2, (), _4, (), _6, ()) in
                                                                                   ( Tstmt_decl (Var.newvar (Some x), Timm, Some ty, e) )
                   )
# 240 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'stmt));
# 978 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'con)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 243 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let (_1, x, _3, ty, _5, e, _7) = ((), _2, (), _4, (), _6, ()) in
                                                                                   ( Tstmt_decl (Var.newvar (Some x), Tmut, Some ty, e) )
                   )
# 243 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'stmt));
# 992 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'loption_separated_nonempty_list_COMMA_separated_pair_ID_COLON_con___)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 246 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let (_1, sname, _3, xs, _5) = ((), _2, (), _4, ()) in
                     let xcl =     ( xs ) in
                                                                                                                         ( let v = Var.newvar (Some sname) in Tstmt_decl (v, Timm, None, Texpr_con (Tcon_prod (List.map snd xcl, Some (List.map fst xcl)))) )
                   )
# 246 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'stmt));
# 1006 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 250 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let (e, _2) = (_1, ()) in
                                             ( Tstmt_expr e )
                   )
# 250 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'stmt));
# 1018 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 253 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let (lval, _2, e, _4) = (_1, (), _3, ()) in
                                                                  ( Tstmt_asgn(lval, e) )
                   )
# 253 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'stmt));
# 1031 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'list_stmt_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 256 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let (_1, _2, e, _4, _5, sl0, _7) = ((), (), _3, (), (), _6, ()) in
                                                                                        ( Tstmt_if (e, Tstmt_blk sl0, Tstmt_blk []) )
                   )
# 256 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'stmt));
# 1044 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'list_stmt_)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : 'list_stmt_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 259 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let (_1, _2, e, _4, _5, sl0, _7, _8, _9, sl1, _11) = ((), (), _3, (), (), _6, (), (), (), _10, ()) in
                                                                                                                                ( Tstmt_if (e, Tstmt_blk sl0, Tstmt_blk sl1) )
                   )
# 259 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'stmt));
# 1058 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'list_stmt_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 262 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let (_1, _2, e, _4, _5, sl, _7) = ((), (), _3, (), (), _6, ()) in
                                                                                          ( Tstmt_while (e, Tstmt_blk sl) )
                   )
# 262 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'stmt));
# 1071 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 267 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let _1 = () in
                              ( Tcon_int )
                   )
# 267 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'con));
# 1082 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 270 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let _1 = () in
                                 ( Tcon_string )
                   )
# 270 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'con));
# 1093 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 273 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let _1 = () in
                               ( Tcon_bool )
                   )
# 273 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'con));
# 1104 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'loption_separated_nonempty_list_COMMA_con__)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 276 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let (_1, xs, _3) = ((), _2, ()) in
                     let cl =     ( xs ) in
                                                                        ( Tcon_prod (cl, None) )
                   )
# 276 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'con));
# 1117 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 280 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let x = _1 in
                                ( Tcon_named (-1, Some x) )
                   )
# 280 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'con));
# 1129 "parse.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'con)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'option_expr_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 283 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                          let (c, _2, len, _4) = (_1, (), _3, ()) in
                                                                 ( Tcon_array(c, len) )
                   )
# 283 "/home/zhxchen17/punklang/punkc_fs/parser/parse.fsy"
                 : 'con));
|]
# 1143 "parse.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 37;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let term lexer lexbuf : expr =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
let prog lexer lexbuf : stmt list =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 2))
